{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\USER\\\\Desktop\\\\Web3\\\\6 figure blockchain\\\\wallet\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\USER\\\\Desktop\\\\Web3\\\\6 figure blockchain\\\\wallet\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import Web3 from'web3';import Wallet from'./contracts/Wallet.json';import detectEthereumProvider from'@metamask/detect-provider';var getWeb3=function getWeb3(){return new Promise(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve,reject){var provider,web3;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return detectEthereumProvider();case 2:provider=_context.sent;if(!provider){_context.next=7;break;}_context.next=6;return provider.request({method:'eth_requestAccounts'});case 6:try{web3=new Web3(window.ethereum);resolve(web3);}catch(error){reject(error);}case 7:reject('Install Metamask');case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());};var getWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3){var networkId,deployedNetwork;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return web3.eth.net.getId();case 2:networkId=_context2.sent;deployedNetwork=Wallet.networks[networkId];return _context2.abrupt(\"return\",new web3.eth.Contract(Wallet.abi,deployedNetwork&&deployedNetwork.address));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function getWallet(_x3){return _ref2.apply(this,arguments);};}();export{getWeb3,getWallet};","map":{"version":3,"sources":["C:/Users/USER/Desktop/Web3/6 figure blockchain/wallet/client/src/utils.js"],"names":["Web3","Wallet","detectEthereumProvider","getWeb3","Promise","resolve","reject","provider","request","method","web3","window","ethereum","error","getWallet","eth","net","getId","networkId","deployedNetwork","networks","Contract","abi","address"],"mappings":"2XAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CACA,MAAOC,CAAAA,sBAAP,KAAmC,2BAAnC,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SAEhB,IAAIC,CAAAA,OAAJ,0FAAa,iBAAOC,OAAP,CAAgBC,MAAhB,0JAEQJ,CAAAA,sBAAsB,EAF9B,QAETK,QAFS,mBAIVA,QAJU,+CAMPA,CAAAA,QAAQ,CAACC,OAAT,CAAiB,CAAEC,MAAM,CAAE,qBAAV,CAAjB,CANO,QAQb,GAAI,CAEEC,IAFF,CAES,GAAIV,CAAAA,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAFT,CAIJP,OAAO,CAACK,IAAD,CAAP,CAEC,CAAC,MAAMG,KAAN,CAAa,CAEfP,MAAM,CAACO,KAAD,CAAN,CAEC,CAlBY,OAoBXP,MAAM,CAAC,kBAAD,CAAN,CApBW,sDAAb,mEAFgB,EAAhB,CAyBA,GAAMQ,CAAAA,SAAS,2FAAG,kBAAMJ,IAAN,2KACQA,CAAAA,IAAI,CAACK,GAAL,CAASC,GAAT,CAAaC,KAAb,EADR,QACVC,SADU,gBAEVC,eAFU,CAEQlB,MAAM,CAACmB,QAAP,CAAgBF,SAAhB,CAFR,kCAGT,GAAIR,CAAAA,IAAI,CAACK,GAAL,CAASM,QAAb,CACLpB,MAAM,CAACqB,GADF,CAELH,eAAe,EAAIA,eAAe,CAACI,OAF9B,CAHS,0DAAH,kBAATT,CAAAA,SAAS,8CAAf,CASA,OAASX,OAAT,CAAkBW,SAAlB","sourcesContent":["import Web3 from 'web3';\r\nimport Wallet from './contracts/Wallet.json';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\nconst getWeb3 = () =>\r\n\r\nnew Promise( async (resolve, reject) => {\r\n\r\nlet provider = await detectEthereumProvider();\r\n\r\nif(provider) {\r\n\r\nawait provider.request({ method: 'eth_requestAccounts' });\r\n\r\ntry {\r\n\r\nconst web3 = new Web3(window.ethereum);\r\n\r\nresolve(web3);\r\n\r\n} catch(error) {\r\n\r\nreject(error);\r\n\r\n}\r\n\r\n} reject('Install Metamask');\r\n\r\n});\r\nconst getWallet = async web3 => {\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = Wallet.networks[networkId];\r\n  return new web3.eth.Contract(\r\n    Wallet.abi,\r\n    deployedNetwork && deployedNetwork.address,\r\n  );\r\n}\r\n\r\nexport { getWeb3, getWallet }; \r\n"]},"metadata":{},"sourceType":"module"}