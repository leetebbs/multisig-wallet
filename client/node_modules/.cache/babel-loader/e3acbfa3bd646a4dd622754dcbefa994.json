{"ast":null,"code":"import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst getWeb3 = () => new Promise(async (resolve, reject) => {\n  let provider = await detectEthereumProvider();\n\n  if (provider) {\n    await provider.request({\n      method: 'eth_requestAccounts'\n    });\n\n    try {\n      const web3 = new Web3(window.ethereum);\n      resolve(web3);\n    } catch (error) {\n      reject(error);\n    }\n  }\n\n  reject('Install Metamask');\n});\n\nconst getWallet = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = Wallet.networks[networkId];\n  return new web3.eth.Contract(Wallet.abi, deployedNetwork && deployedNetwork.address);\n};\n\nexport { getWeb3, getWallet };","map":{"version":3,"sources":["C:/Users/USER/Desktop/Web3/6 figure blockchain/wallet/client/src/utils.js"],"names":["Web3","Wallet","detectEthereumProvider","getWeb3","Promise","resolve","reject","provider","request","method","web3","window","ethereum","error","getWallet","networkId","eth","net","getId","deployedNetwork","networks","Contract","abi","address"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,OAAO,GAAG,MAEhB,IAAIC,OAAJ,CAAa,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAExC,MAAIC,QAAQ,GAAG,MAAML,sBAAsB,EAA3C;;AAEA,MAAGK,QAAH,EAAa;AAEb,UAAMA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAN;;AAEA,QAAI;AAEJ,YAAMC,IAAI,GAAG,IAAIV,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAAb;AAEAP,MAAAA,OAAO,CAACK,IAAD,CAAP;AAEC,KAND,CAME,OAAMG,KAAN,EAAa;AAEfP,MAAAA,MAAM,CAACO,KAAD,CAAN;AAEC;AAEA;;AAACP,EAAAA,MAAM,CAAC,kBAAD,CAAN;AAED,CAtBD,CAFA;;AAyBA,MAAMQ,SAAS,GAAG,MAAMJ,IAAN,IAAc;AAC9B,QAAMK,SAAS,GAAG,MAAML,IAAI,CAACM,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,QAAMC,eAAe,GAAGlB,MAAM,CAACmB,QAAP,CAAgBL,SAAhB,CAAxB;AACA,SAAO,IAAIL,IAAI,CAACM,GAAL,CAASK,QAAb,CACLpB,MAAM,CAACqB,GADF,EAELH,eAAe,IAAIA,eAAe,CAACI,OAF9B,CAAP;AAID,CAPD;;AASA,SAASpB,OAAT,EAAkBW,SAAlB","sourcesContent":["import Web3 from 'web3';\r\nimport Wallet from './contracts/Wallet.json';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\nconst getWeb3 = () =>\r\n\r\nnew Promise( async (resolve, reject) => {\r\n\r\nlet provider = await detectEthereumProvider();\r\n\r\nif(provider) {\r\n\r\nawait provider.request({ method: 'eth_requestAccounts' });\r\n\r\ntry {\r\n\r\nconst web3 = new Web3(window.ethereum);\r\n\r\nresolve(web3);\r\n\r\n} catch(error) {\r\n\r\nreject(error);\r\n\r\n}\r\n\r\n} reject('Install Metamask');\r\n\r\n});\r\nconst getWallet = async web3 => {\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = Wallet.networks[networkId];\r\n  return new web3.eth.Contract(\r\n    Wallet.abi,\r\n    deployedNetwork && deployedNetwork.address,\r\n  );\r\n}\r\n\r\nexport { getWeb3, getWallet }; \r\n"]},"metadata":{},"sourceType":"module"}