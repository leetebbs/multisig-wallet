{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Web3\\\\6 figure blockchain\\\\wallet\\\\client\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { getWeb3, getWallet } from './utils.js';\nimport Header from './Header.js';\nimport NewTransfer from './NewTransfer.js';\nimport TransferList from './TransferList.js';\nimport './App.css';\nimport background from \"./images/Background-V1.1-1.png\";\nimport logo from \"./images/Logo.png\";\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [wallet, setWallet] = useState(undefined);\n  const [approvers, setApprovers] = useState([]);\n  const [quorum, setQuorum] = useState(undefined);\n  const [transfers, setTransfers] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const wallet = await getWallet(web3);\n      const approvers = await wallet.methods.getApprovers().call();\n      const quorum = await wallet.methods.quorum().call();\n      const transfers = await wallet.methods.getTransfers().call();\n      let promises = transfers.map(async transfer => {\n        let newTransfer = [...transfer];\n        newTransfer.id = transfer.id;\n        newTransfer.amount = transfer.amount;\n        newTransfer.to = transfer.to;\n        newTransfer.approvals = transfer.approvals;\n        newTransfer.sent = transfer.sent;\n        newTransfer.approvedByUser = await wallet.methods.approvals(accounts[0], transfer.id).call();\n        return newTransfer;\n      });\n      let newTransfers = [];\n\n      for await (let newTransfer of promises) {\n        newTransfers.push(newTransfer);\n        console.log(newTransfer);\n      }\n\n      setWeb3(web3);\n      setAccounts(accounts);\n      setWallet(wallet);\n      setApprovers(approvers);\n      setQuorum(quorum);\n      setTransfers(newTransfers);\n    };\n\n    init();\n  }, []);\n\n  const ingestApprovedByUser = async transfers => {\n    let promises = transfers.map(async transfer => {\n      let newTransfer = [...transfer];\n      newTransfer.id = transfer.id;\n      newTransfer.amount = transfer.amount;\n      newTransfer.to = transfer.to;\n      newTransfer.approvals = transfer.approvals;\n      newTransfer.sent = transfer.sent;\n      newTransfer.approvedByUser = await wallet.methods.approvals(accounts[0], transfer.id).call();\n      return newTransfer;\n    });\n    let newTransfers = [];\n\n    for await (let newTransfer of promises) {\n      newTransfers.push(newTransfer);\n    }\n\n    setTransfers(newTransfers);\n  };\n\n  const createTransfer = async transfer => {\n    await wallet.methods.createTransfer(transfer.amount, transfer.to).send({\n      from: accounts[0]\n    });\n    await fetchTransferList();\n  };\n\n  const approveTransfer = async transferId => {\n    await wallet.methods.approveTransfer(transferId).send({\n      from: accounts[0]\n    });\n    await fetchTransferList();\n  };\n\n  const fetchTransferList = async () => {\n    const transfers = await wallet.methods.getTransfers().call();\n    ingestApprovedByUser(transfers);\n  };\n\n  if (typeof web3 === 'undefined' || typeof accounts === 'undefined' || typeof wallet === 'undefined' || approvers.length === 0 || typeof quorum === 'undefined') {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundImage: `url(${background})`,\n      width: '100vw',\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    id: \"logo\",\n    src: logo,\n    alt: \"Logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), \";\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    approvers: approvers,\n    quorum: quorum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NewTransfer, {\n    createTransfer: createTransfer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TransferList, {\n    transfers: transfers,\n    approveTransfer: approveTransfer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Web3/6 figure blockchain/wallet/client/src/App.js"],"names":["React","useEffect","useState","getWeb3","getWallet","Header","NewTransfer","TransferList","background","logo","App","web3","setWeb3","undefined","accounts","setAccounts","wallet","setWallet","approvers","setApprovers","quorum","setQuorum","transfers","setTransfers","init","eth","getAccounts","methods","getApprovers","call","getTransfers","promises","map","transfer","newTransfer","id","amount","to","approvals","sent","approvedByUser","newTransfers","push","console","log","ingestApprovedByUser","createTransfer","send","from","fetchTransferList","approveTransfer","transferId","length","backgroundImage","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getWeb3, getWallet } from './utils.js'; \nimport Header from './Header.js';\nimport NewTransfer from './NewTransfer.js';\nimport TransferList from './TransferList.js';\nimport './App.css';\nimport background from \"./images/Background-V1.1-1.png\";\nimport logo from \"./images/Logo.png\";\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [wallet, setWallet] = useState(undefined);\n  const [approvers, setApprovers] = useState([]);\n  const [quorum, setQuorum] = useState(undefined);\n  const [transfers, setTransfers] = useState([]);\n\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const wallet = await getWallet(web3);\n      const approvers = await wallet.methods.getApprovers().call();\n      const quorum = await wallet.methods.quorum().call();\n      const transfers = await wallet.methods.getTransfers().call();\n\n      let promises = transfers.map(async transfer => {\n        let newTransfer = [...transfer];\n        newTransfer.id = transfer.id;\n        newTransfer.amount = transfer.amount;\n        newTransfer.to = transfer.to;\n        newTransfer.approvals = transfer.approvals;\n        newTransfer.sent = transfer.sent;\n        newTransfer.approvedByUser = await wallet.methods.approvals(accounts[0], transfer.id).call();\n        return newTransfer;\n      });\n\n      let newTransfers = [];\n      for await (let newTransfer of promises){\n        newTransfers.push(newTransfer);\n        console.log(newTransfer);\n      }\n  \n      setWeb3(web3);\n      setAccounts(accounts);\n      setWallet(wallet);\n      setApprovers(approvers);\n      setQuorum(quorum);\n      setTransfers(newTransfers);\n    };\n    init();\n  }, []);\n\n  const ingestApprovedByUser = async transfers => {\n      let promises = transfers.map(async transfer => {\n        let newTransfer = [...transfer];\n        newTransfer.id = transfer.id;\n        newTransfer.amount = transfer.amount;\n        newTransfer.to = transfer.to;\n        newTransfer.approvals = transfer.approvals;\n        newTransfer.sent = transfer.sent;\n        newTransfer.approvedByUser = await wallet.methods.approvals(accounts[0], transfer.id).call();\n        return newTransfer;\n      });\n  \n      let newTransfers = [];\n      for await (let newTransfer of promises){\n        newTransfers.push(newTransfer);\n      }\n  \n      setTransfers(newTransfers);\n    }\n    \n  const createTransfer = async transfer => {\n    await wallet.methods\n      .createTransfer(transfer.amount, transfer.to)\n      .send({from: accounts[0]});\n    await fetchTransferList();\n  }\n\n  const approveTransfer = async transferId => {\n    await wallet.methods\n      .approveTransfer(transferId)\n      .send({from: accounts[0]});\n    await fetchTransferList();\n  }\n  \n  const fetchTransferList = async () => {\n    const transfers = await wallet.methods.getTransfers().call();\n    ingestApprovedByUser(transfers);\n  }\n\n  if(\n    typeof web3 === 'undefined'\n    || typeof accounts === 'undefined'\n    || typeof wallet === 'undefined'\n    || approvers.length === 0\n    || typeof quorum === 'undefined'\n  ) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div style={{\n      backgroundImage: `url(${background})`,\n      width: '100vw',\n      height: '100vh'\n    }}>\n      <div>\n      <img id=\"logo\" src={logo} alt=\"Logo\" />;\n      </div>\n\n      <div id=\"main\">\n      <Header approvers={approvers} quorum={quorum} />\n      <NewTransfer createTransfer={createTransfer} />\n      <TransferList transfers={transfers} approveTransfer={approveTransfer} />\n      </div> \n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}