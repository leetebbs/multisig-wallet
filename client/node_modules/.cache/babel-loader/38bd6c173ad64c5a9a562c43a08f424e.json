{"ast":null,"code":"import Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Wallet from './contracts/Wallet.json';\n\nconst getWeb3 = () => new Promise(async (resolve, reject) => {\n  let provider = await detectEthereumProvider();\n\n  if (provider) {\n    await provider.request({\n      method: 'eth_requestAccounts'\n    });\n\n    try {\n      const web3 = new Web3(window.ethereum);\n      resolve(web3);\n    } catch (error) {\n      reject(error);\n    }\n  }\n\n  reject('Install Metamask');\n});\n\nconst getWallet = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = Wallet.networks[networkId];\n  return new web3.eth.Contract(Wallet.abi, deployedNetwork && deployedNetwork.address);\n};\n\nexport { getWeb3, getWallet };","map":{"version":3,"sources":["C:/Users/USER/Desktop/Web3/6 figure blockchain/wallet/client/src/utils.js"],"names":["Web3","detectEthereumProvider","Wallet","getWeb3","Promise","resolve","reject","provider","request","method","web3","window","ethereum","error","getWallet","networkId","eth","net","getId","deployedNetwork","networks","Contract","abi","address"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAa,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACtC,MAAIC,QAAQ,GAAG,MAAMN,sBAAsB,EAA3C;;AACA,MAAGM,QAAH,EAAa;AACX,UAAMA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAN;;AACA,QAAI;AACF,YAAMC,IAAI,GAAG,IAAIV,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAAb;AACAP,MAAAA,OAAO,CAACK,IAAD,CAAP;AACD,KAHD,CAGE,OAAMG,KAAN,EAAa;AACbP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF;;AACDP,EAAAA,MAAM,CAAC,kBAAD,CAAN;AACD,CAZD,CADF;;AAeA,MAAMQ,SAAS,GAAG,MAAMJ,IAAN,IAAc;AAC9B,QAAMK,SAAS,GAAG,MAAML,IAAI,CAACM,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,QAAMC,eAAe,GAAGjB,MAAM,CAACkB,QAAP,CAAgBL,SAAhB,CAAxB;AACA,SAAO,IAAIL,IAAI,CAACM,GAAL,CAASK,QAAb,CACLnB,MAAM,CAACoB,GADF,EAELH,eAAe,IAAIA,eAAe,CAACI,OAF9B,CAAP;AAID,CAPD;;AASA,SAASpB,OAAT,EAAkBW,SAAlB","sourcesContent":["import Web3 from 'web3';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport Wallet from './contracts/Wallet.json';\r\n\r\nconst getWeb3 = () =>\r\n  new Promise( async (resolve, reject) => {\r\n    let provider = await detectEthereumProvider();\r\n    if(provider) {\r\n      await provider.request({ method: 'eth_requestAccounts' });\r\n      try {\r\n        const web3 = new Web3(window.ethereum);\r\n        resolve(web3);\r\n      } catch(error) {\r\n        reject(error);\r\n      }\r\n    }\r\n    reject('Install Metamask');\r\n  });\r\n\r\nconst getWallet = async web3 => {\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = Wallet.networks[networkId];\r\n  return new web3.eth.Contract(\r\n    Wallet.abi,\r\n    deployedNetwork && deployedNetwork.address,\r\n  );\r\n}\r\n\r\nexport { getWeb3, getWallet }; \r\n"]},"metadata":{},"sourceType":"module"}