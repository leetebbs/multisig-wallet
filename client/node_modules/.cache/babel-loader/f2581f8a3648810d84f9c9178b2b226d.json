{"ast":null,"code":"import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n\n        try {\n          // Request account access if needed\n          await window.ethereum.enable(); // Acccounts now exposed\n\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n          // Use Mist/MetaMask's provider.\n          const web3 = window.web3;\n          console.log(\"Injected web3 detected.\");\n          resolve(web3);\n        } // Fallback to localhost; use dev console port by default...\n        else {\n            const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n            const web3 = new Web3(provider);\n            console.log(\"No web3 instance injected, using Local web3.\");\n            resolve(web3);\n          }\n    });\n  });\n};\n\nconst getWallet = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = Wallet.networks[networkId];\n  return new web3.eth.Contract(Wallet.abi, deployedNetwork && deployedNetwork.address);\n};\n\nexport { getWeb3, getWallet };","map":{"version":3,"sources":["C:/Users/USER/Desktop/Web3/6 figure blockchain/wallet/client/src/utils.js"],"names":["Web3","Wallet","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider","getWallet","networkId","eth","net","getId","deployedNetwork","networks","Contract","abi","address"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,UAAID,MAAM,CAACE,QAAX,EAAqB;AACnB,cAAMC,IAAI,GAAG,IAAIT,IAAJ,CAASM,MAAM,CAACE,QAAhB,CAAb;;AACA,YAAI;AACF;AACA,gBAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN,CAFE,CAGF;;AACAN,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD,SALD,CAKE,OAAOE,KAAP,EAAc;AACdN,UAAAA,MAAM,CAACM,KAAD,CAAN;AACD;AACF,OAVD,CAWA;AAXA,WAYK,IAAIL,MAAM,CAACG,IAAX,EAAiB;AACpB;AACA,gBAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAT,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD,SALI,CAML;AANK,aAOA;AACH,kBAAMK,QAAQ,GAAG,IAAId,IAAI,CAACe,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGA,kBAAMP,IAAI,GAAG,IAAIT,IAAJ,CAASc,QAAT,CAAb;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAT,YAAAA,OAAO,CAACK,IAAD,CAAP;AACD;AACF,KA7BD;AA8BD,GAhCM,CAAP;AAiCD,CAlCD;;AAoCA,MAAMQ,SAAS,GAAG,MAAMR,IAAN,IAAc;AAC9B,QAAMS,SAAS,GAAG,MAAMT,IAAI,CAACU,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,QAAMC,eAAe,GAAGrB,MAAM,CAACsB,QAAP,CAAgBL,SAAhB,CAAxB;AACA,SAAO,IAAIT,IAAI,CAACU,GAAL,CAASK,QAAb,CACLvB,MAAM,CAACwB,GADF,EAELH,eAAe,IAAIA,eAAe,CAACI,OAF9B,CAAP;AAID,CAPD;;AASA,SAASxB,OAAT,EAAkBe,SAAlB","sourcesContent":["import Web3 from 'web3';\r\nimport Wallet from './contracts/Wallet.json';\r\n\r\nconst getWeb3 = () => {\r\n  return new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://localhost:9545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nconst getWallet = async web3 => {\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = Wallet.networks[networkId];\r\n  return new web3.eth.Contract(\r\n    Wallet.abi,\r\n    deployedNetwork && deployedNetwork.address,\r\n  );\r\n}\r\n\r\nexport { getWeb3, getWallet }; \r\n"]},"metadata":{},"sourceType":"module"}